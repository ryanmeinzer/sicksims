{"version":3,"sources":["Header.js","NaivePerson.js","QuarantinedPerson.js","SafePerson.js","SickPerson.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","onClick","startGameButton","NaivePerson","state","time","componentDidMount","startInterval","interval","setInterval","updateCounter","checkTime","naiveToSickChanger","id","setState","prevState","clearInterval","this","makeSafe","style","cursor","Component","QuarantinedPerson","quarantinedToNaiveChanger","SafePerson","SickPerson","makeQuarantined","App","people","status","e","parseInt","target","p","find","updatedP","map","person","isEveryoneSafe","sickPersonId","quarantinedPersonId","safeToSavedChanger","alert","startGame","window","location","replace","className","exact","path","render","key","allPeople","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f212fa27.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = props => <div><h1>SickSims</h1><h3><i>Save the world!</i> ðŸ¥°</h3><h6>Click naive people ðŸ¥´ to make them safe ðŸ˜· before they get sick ðŸ¤¢. <br></br> Click sick people ðŸ¤¢ to quarantine them ðŸ¤’ for recovery back to naive ðŸ¥´.</h6><p><button onClick={props.startGameButton}>Start Game</button></p></div>\n\nexport default Header","import React, { Component } from 'react'\n\nexport default class NaivePerson extends Component {\n\n    // Doesn't work...Is state not needed unless you want a timer on the objects?\n    // componentDidMount = () => {\n    //     setTimeout(() => { this.props.riskyToSickChanger(this.props.id) }, 2500)\n    // }\n\n    state = {\n        time: 3\n    }\n\n    componentDidMount = () => {\n        this.startInterval()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    startInterval = () => {\n        this.interval = setInterval(this.updateCounter, 1000);\n    };\n\n    checkTime = () => {\n        // console.log(\"checking time\", this.state.time, this.props.id)\n    if (this.state.time <= 0) {\n        // console.log(\"woo!\")\n        this.props.naiveToSickChanger(this.props.id)\n        // console.log(\"risky to sick changed\", this.props.id)\n        }\n    }\n\n    updateCounter = () => {\n        this.setState((prevState) => ({time: prevState.time - 1 }), this.checkTime)\n        // console.log(this.props.id)\n    }\n\n    render() {\n        return(\n            <span id={this.props.id} onClick={this.props.makeSafe} style={{ cursor: 'pointer' }}>ðŸ¥´</span>\n        )\n    }\n\n}\n","import React, { Component } from 'react'\n\nexport default class QuarantinedPerson extends Component {\n\n    // Doesn't work...Is state not needed unless you want a timer on the objects?\n    // componentDidMount = () => {\n    //     setTimeout(() => { this.props.quarantinedToRiskyChanger(this.props.id) }, 5000)\n    // }\n\n    state = {\n        time: 5\n    }\n\n    componentDidMount = () => {\n        this.startInterval()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    startInterval = () => {\n        this.interval = setInterval(this.updateCounter, 1000)\n    }\n\n    checkTime = () => {\n        // console.log(\"checking time\", this.state.time, this.props.id)\n    if (this.state.time <= 0) {\n        // console.log(\"woo!\")\n        this.props.quarantinedToNaiveChanger(this.props.id)\n        // console.log(\"quarantined to risky changed\", this.props.id)\n        }\n    }\n\n    updateCounter = () => {\n        this.setState((prevState) => ({time: prevState.time - 1 }), this.checkTime)\n        // console.log(this.props.id)\n    }\n\n    render() {\n        return(\n            <span id={this.props.id} style={{ cursor: 'not-allowed' }}>ðŸ¤’ â–½ {this.state.time} </span>\n        )\n    }\n\n}\n","import React, { Component } from 'react'\n\nexport default class SafePerson extends Component {\n\n    render() {\n        return(\n            <span id={this.props.id} style={{ cursor: 'not-allowed' }}>ðŸ˜·</span>\n        )\n    }\n\n}\n","import React, { Component } from 'react'\n\nexport default class SickPerson extends Component {\n\n    render() {\n        return(\n            <span id={this.props.id} onClick={this.props.makeQuarantined} style={{ cursor: 'pointer' }}>ðŸ¤¢</span>\n        )\n    }\n\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport Header from './Header.js'\nimport NaivePerson from './NaivePerson.js'\nimport QuarantinedPerson from './QuarantinedPerson.js'\nimport SafePerson from './SafePerson.js'\nimport SickPerson from './SickPerson.js'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nexport default class App extends Component {\n\n  state = {\n    people: [\n      { id: 1, status: \"naive\" },\n      { id: 2, status: \"sick\" },\n      { id: 3, status: \"naive\" },\n      { id: 4, status: \"naive\" },\n      { id: 5, status: \"safe\" },\n      { id: 6, status: \"quarantined\" },\n      { id: 7, status: \"sick\" },\n      { id: 8, status: \"naive\" },\n      { id: 9, status: \"safe\" },\n      { id: 10, status: \"sick\" }\n    ]\n  }\n\n  // Click to make naive person safe\n  makeSafe = (e) => {\n    let id = parseInt(e.target.id);\n    let p = this.state.people.find((p) => p.id === id);\n    let updatedP = { ...p, status: \"safe\" }\n\n    function changeOnePersonAndReturnAllPeople(prevState) {\n      return {\n        people: prevState.people.map((person) =>\n          person.id === id ? updatedP : person\n        )\n      }\n    }\n    this.setState(changeOnePersonAndReturnAllPeople, this.isEveryoneSafe)\n  }\n\n  // Click to make a sick person quarantined\n  makeQuarantined = (e) => {\n    let id = parseInt(e.target.id);\n    let p = this.state.people.find((p) => p.id === id);\n    let updatedP = { ...p, status: \"quarantined\" }\n\n    function changeOnPersonAndReturnAllPeople(prevState) {\n      return {\n        people: prevState.people.map((person) =>\n          person.id === id ? updatedP : person\n        )\n      }\n    }\n    this.setState(changeOnPersonAndReturnAllPeople)\n  }\n\n  // Automatically make a naive person sick after set interval\n  naiveToSickChanger = sickPersonId => {\n    // console.log(\"In naive to sickÂ¸\")\n    let p = this.state.people.find((p) => p.id === sickPersonId)\n      // .map((np) => np.status       ))\n    let updatedP = { ...p, status: 'sick' }\n\n    function changeNaivePersonAndReturnAllPeople(prevState) {\n      return {\n        people: prevState.people.map((person) =>\n          person.id === sickPersonId ? updatedP : person\n        )\n      }\n    }\n    this.setState(changeNaivePersonAndReturnAllPeople)\n  }\n\n  // Automatically return a quarantined person back to naive in public after set interval\n  quarantinedToNaiveChanger = quarantinedPersonId => {\n    // console.log(\"In naive to sickÂ¸\")\n    let p = this.state.people.find((p) => p.id === quarantinedPersonId)\n    // .map((np) => np.status       ))\n    let updatedP = { ...p, status: 'naive' }\n\n    function changeQuarantinedPersonAndReturnAllPeople(prevState) {\n      return {\n        people: prevState.people.map((person) =>\n          person.id === quarantinedPersonId ? updatedP : person\n        )\n      }\n    }\n    this.setState(changeQuarantinedPersonAndReturnAllPeople)\n  }\n\n  // Check to see if everyone is safe\n  isEveryoneSafe = () => {\n    if (!this.state.people.find(({ status }) => status === 'naive' || status === 'sick' || status === 'quarantined')) {\n      this.safeToSavedChanger()\n    }\n  }\n\n  // If everyone is safe, change everyone from safe to saved\n  safeToSavedChanger = () => {\n    function changeSafePersonAndReturnAllPeople(prevState) {\n      return {\n        people: prevState.people.map((person) => {\n          // debugger\n          if (person.status === 'safe') {\n            return { ...person, status: 'saved' }\n          }\n        })\n      }\n    }\n    this.setState(changeSafePersonAndReturnAllPeople, alert('Congrats - you saved the world!'))\n  }\n\n  startGame = () => {\n    // this.quarantinedToNaiveChanger()\n    window.location.replace('/play')\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n\n          <Route exact path='/' render={() => \n          \n          <>\n          < Header startGameButton={this.startGame}/>\n            <div className=\"FakeGameContainer\">\n              <h4>In Public</h4>\n              ðŸ¥´ðŸ¤¢ðŸ¥´ðŸ¥´ðŸ˜·ðŸ¤¢ðŸ¥´ðŸ˜·ðŸ¤¢\n              <h4>Quarantined</h4>\n              ðŸ¤’ â–½ 5\n            </div>\n          </>\n          } />\n\n          <Route exact path='/play' render={() => \n\n            <>\n            < Header startGameButton={this.startGame} />\n              <div className=\"GameContainer\">\n\n                <h4>In Public</h4>\n\n                {this.state.people.map(person => {\n                  if (person.status === \"naive\") {\n                    return <NaivePerson key={`naive-${person.id}`} id={person.id} status={person.status} makeSafe={this.makeSafe} naiveToSickChanger={this.naiveToSickChanger} />\n                  } else if (person.status === \"safe\") {\n                    return <SafePerson key={`safe-${person.id}`} id={person.id} status={person.status} safeToSavedChanger={this.safeToSavedChanger} allPeople={this.state.people} />\n                  } else if (person.status === \"sick\") {\n                    return <SickPerson key={`sick-${person.id}`} id={person.id} status={person.status} makeQuarantined={this.makeQuarantined} />\n                  } else if (person.status === \"saved\") {\n                    return <span key={`saved-${person.id}`} id={person.id} style={{ cursor: 'not-allowed' }}>ðŸ¥°</span>\n                  }\n                  })\n                }\n\n                <h4>Quarantined</h4>\n\n                {this.state.people.map(person => {\n                  if (person.status === \"quarantined\") {\n                    return <QuarantinedPerson key={`quarantined-${person.id}`} id={person.id} status={person.status} quarantinedToNaiveChanger={this.quarantinedToNaiveChanger} />\n                  }\n                })\n                }\n\n              </div> \n            </>\n          } />\n\n        </Router>\n\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}